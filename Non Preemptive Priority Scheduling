#include<stdio.h>
#define MAX 9999
int i, n, j;
struct process
{
int id, at, bt, pr, ct, tat, wt, exe;
};
struct process p[30];
void read()
{
printf("\n");
for(i = 0 ; i < n ; i++)
{
printf("\nEnter Process ID, Arrival Time, Burst Time & Priority for Process - %d :", ( i + 1 ));
scanf("%d %d %d %d", &p[i].id, &p[i].at, &p[i].bt, &p[i].pr);
}
}
void display()
{
float tot_tat = 0.0, tot_wt = 0.0;
printf("\n\nProcess ID Arrival Time Burst Time Priority Completion TimeTurnaround Time Waiting Time");
for(i = 0 ; i < n ; i++)
{
printf("\n");
printf(" P%d ", p[i].id);// 14 spaces
printf("%d ", p[i].at);// 19 spaces
printf("%d ", p[i].bt);// 12 spaces
printf("%d ", p[i].pr);// 12 spaces
printf("%d ", p[i].ct);// 20 spaces
printf("%d ", p[i].tat);// 18 spaces
printf("%d", p[i].wt);
tot_tat = tot_tat + p[i].tat;
tot_wt = tot_wt + p[i].wt;
}
printf("\n\nAverage Turnaround Time = %.2f ", ( tot_tat / n ));
printf("\nAverage Waiting Time = %.2f ", ( tot_wt / n ));
}
8
void sort()
{
struct process t;
for(i = 0 ; i < n - 1 ; i++)
{
for(j = 0 ; j < n - 1 - i ; j++)
{
if(p[j].at > p[j + 1].at)
{
t = p[j];
p[j] = p[j + 1];
p[j + 1] = t;
}
}
}
}
void Find_Completion_Time()
{
int completed = 0, time = 0, min_burst_time = MAX, min_index;
while(completed != n)
{
for(int i = 0; i < n; i++)
{
//"p[i].exe" is used to know whether the process is executed or not
if(p[i].at <= time && p[i].exe == 0)
{
if(p[i].pr < min_burst_time)
{
min_burst_time = p[i].pr;
min_index = i;
}
}
}
if(min_burst_time == MAX)
{
time++;
continue;
}
p[min_index].ct = time + p[min_index].bt;
time = p[min_index].ct;
p[min_index].exe = 1;
min_burst_time = MAX;
completed++;
}
}
void Find_Turnaround_Time() {
for(i=0 ; i <n ; i++)
{
p[i].tat= p[i].ct- p[i].at;
}
}
void Find_Waiting_Time() {
for(i=0 ; i <n ; i++)
{
p[i].wt= p[i].tat- p[i].bt;
}
}
void main() {
printf("\nEnter Number of Processes : ");
scanf("%d", &n);
read();
sort();
Find_Completion_Time();
Find_Turnaround_Time();
Find_Waiting_Time();
display();
}
